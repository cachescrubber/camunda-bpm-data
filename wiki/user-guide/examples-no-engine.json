{
  "reference": {
    "path": "wiki/user-guide",
    "baseUrl": "https://www.holunda.io/camunda-bpm-data",
    "fileName": "examples-no-engine",
    "extension": "html",
    "usePrettyUrl": true,
    "link": "https://www.holunda.io/camunda-bpm-data/wiki/user-guide/examples-no-engine"
  },
  "next": {
    "path": "wiki/user-guide",
    "baseUrl": "https://www.holunda.io/camunda-bpm-data",
    "fileName": "further-outlook",
    "extension": "html",
    "usePrettyUrl": true,
    "link": "https://www.holunda.io/camunda-bpm-data/wiki/user-guide/further-outlook"
  },
  "previous": {
    "path": "wiki/user-guide",
    "baseUrl": "https://www.holunda.io/camunda-bpm-data",
    "fileName": "examples-kotlin",
    "extension": "html",
    "usePrettyUrl": true,
    "link": "https://www.holunda.io/camunda-bpm-data/wiki/user-guide/examples-kotlin"
  },
  "data": {"title": "Example no engine"},
  "description": "",
  "title": "Example no engine",
  "content": "<h2 id=\"use-case\"><a href=\"#use-case\" id=\"use-case\" class=\"anchor\"><\/a>Use case<\/h2>\n<p>In seldom cases you may want to use the <code>camunda-bpm-data<\/code> library without Camunda BPM Engine. The most frequent\ncase for this is if you provide a third-party library that is used with or without the engine. In particular, there is no way to use functionality relying on the Camunda engine without it, but there is some functionality working on simple <code>Map&lt;String, Object&gt;<\/code> or <code>VariableMap<\/code> (from a separate small library <code>org.camunda.commons:camunda-commons-typed-values<\/code>)\nwhich is still usable <strong>WITHOUT<\/strong> having the entire Camunda BPM Engine on the class path.<\/p>\n<h2 id=\"limitations\"><a href=\"#limitations\" id=\"limitations\" class=\"anchor\"><\/a>Limitations<\/h2>\n<p>Due to limitations provided by the JVM, usage of <code>CamundaBpmData<\/code> conveneince methods is <strong>NOT POSSIBLE<\/strong> if the parts of the Java Camunda API is not on the classpath (<code>RuntimeService<\/code>, <code>TaskService<\/code>, <code>LockedExternalTask<\/code>, ...).<\/p>\n<h2 id=\"default-solution\"><a href=\"#default-solution\" id=\"default-solution\" class=\"anchor\"><\/a>Default solution<\/h2>\n<p>The default solution for this problem would be to put the <code>org.camunda.bpm:camunda-engine<\/code> Camunda BPM Engine JAR on the classpath, but don't initialize the Camunda BPM Engine.<\/p>\n<h2 id=\"alterantve-solution\"><a href=\"#alterantve-solution\" id=\"alterantve-solution\" class=\"anchor\"><\/a>Alterantve solution<\/h2>\n<p>In order to make the JAR footprint lighter, we created a special artifact, which provides the Camunda BPM API only (API classes only but no implementation). This artifact includes <strong>ORIGINAL<\/strong> Camunda BPM classes of the API.<\/p>\n<p>In the same time, we started a discussion with Camunda Team to provide a dedicated API JAR of the engine. We will produce the Camunda BPM API for the upcoming releases. Instead of using the original engine JAR, you might want to put the following artifact on your classpath:<\/p>\n<pre><code class=\"language-xml\">\n&lt;dependency&gt;\n      &lt;groupId&gt;io.holunda.camunda-api&lt;/groupId&gt;\n      &lt;artifactId&gt;camunda-bpm-engine-api&lt;/artifactId&gt;\n      &lt;version&gt;${camunda.version}&lt;/version&gt;\n&lt;/dependency&gt;\n<\/code><\/pre>\n<p>For more information about the Camunda BPM API, please check its GitHub project page: <a href=\"https://github.com/holunda-io/camunda-bpm-api/\">https://github.com/holunda-io/camunda-bpm-api/<\/a><\/p>\n"
}