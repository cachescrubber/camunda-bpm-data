{
  "reference": {
    "path": "wiki/user-guide",
    "baseUrl": "https://www.holunda.io/camunda-bpm-data",
    "fileName": "examples-kotlin",
    "extension": "html",
    "usePrettyUrl": true,
    "link": "https://www.holunda.io/camunda-bpm-data/wiki/user-guide/examples-kotlin"
  },
  "next": {
    "path": "wiki/user-guide",
    "baseUrl": "https://www.holunda.io/camunda-bpm-data",
    "fileName": "examples-no-engine",
    "extension": "html",
    "usePrettyUrl": true,
    "link": "https://www.holunda.io/camunda-bpm-data/wiki/user-guide/examples-no-engine"
  },
  "previous": {
    "path": "wiki/user-guide",
    "baseUrl": "https://www.holunda.io/camunda-bpm-data",
    "fileName": "examples-java",
    "extension": "html",
    "usePrettyUrl": true,
    "link": "https://www.holunda.io/camunda-bpm-data/wiki/user-guide/examples-java"
  },
  "data": {"title": "Kotlin Examples"},
  "description": "",
  "title": "Kotlin Examples",
  "content": "<h2 id=\"kotlin-examples\"><a href=\"#kotlin-examples\" id=\"kotlin-examples\" class=\"anchor\"><\/a>Kotlin Examples<\/h2>\n<p>The following snippets demonstrate the usage of the library from Kotlin<\/p>\n<h3 id=\"define-variable\"><a href=\"#define-variable\" id=\"define-variable\" class=\"anchor\"><\/a>Define variable<\/h3>\n<pre><code class=\"language-kotlin\">\nimport io.holunda.data.CamundaBpmDataKotlin\n\nobject Variables {\n    val ORDER_ID = stringVariable(&quot;orderId&quot;)\n    val ORDER: VariableFactory&lt;Order&gt; = customVariable(&quot;order&quot;)\n    val ORDER_APPROVED = booleanVariable(&quot;orderApproved&quot;)\n    val ORDER_POSITION: VariableFactory&lt;OrderPosition&gt; = customVariable(&quot;orderPosition&quot;)\n    val ORDER_TOTAL: VariableFactory&lt;BigDecimal&gt; = customVariable(&quot;orderTotal&quot;)\n}\n<\/code><\/pre>\n<h3 id=\"read-variable-from-java-delegate\"><a href=\"#read-variable-from-java-delegate\" id=\"read-variable-from-java-delegate\" class=\"anchor\"><\/a>Read variable from Java delegate<\/h3>\n<pre><code class=\"language-kotlin\">@Configuration\nclass JavaDelegates {\n\n    @Bean\n    fun calculateOrderPositions() = JavaDelegate { execution -&gt;\n        val orderPosition = ORDER_POSITION.from(execution).get()\n        // order position is of type OrderPosition\n    }\n}\n<\/code><\/pre>\n<h3 id=\"write-variable-from-java-delegate\"><a href=\"#write-variable-from-java-delegate\" id=\"write-variable-from-java-delegate\" class=\"anchor\"><\/a>Write variable from Java delegate<\/h3>\n<pre><code class=\"language-kotlin\">import java.math.BigDecimal\n\n@Configuration\nclass JavaDelegates {\n\n    @Bean\n    fun calculateOrderPositions() = JavaDelegate { execution -&gt;\n        val orderPosition = ORDER_POSITION.from(execution).get()\n        ORDER_TOTAL.on(execution).set {\n            orderPosition.netCost.times(BigDecimal.valueOf(orderPosition.amount))\n        }\n    }\n}\n<\/code><\/pre>\n<h3 id=\"remove-variable-from-java-delegate\"><a href=\"#remove-variable-from-java-delegate\" id=\"remove-variable-from-java-delegate\" class=\"anchor\"><\/a>Remove variable from Java delegate<\/h3>\n<pre><code class=\"language-kotlin\">@Configuration\nclass JavaDelegates {\n\n    @Bean\n    fun removeTotal() = JavaDelegate { execution -&gt;\n        ORDER_TOTAL.on(execution).remove()\n    }\n}\n<\/code><\/pre>\n<h3 id=\"update-variable-from-java-delegate\"><a href=\"#update-variable-from-java-delegate\" id=\"update-variable-from-java-delegate\" class=\"anchor\"><\/a>Update variable from Java delegate<\/h3>\n<pre><code class=\"language-kotlin\">import java.math.BigDecimal\n@Configuration\nclass JavaDelegates {\n\n    @Bean\n    fun calculateOrderPositions() = JavaDelegate { execution -&gt;\n        val orderPosition = ORDER_POSITION.from(execution).get()\n        ORDER_TOTAL.on(execution).update {\n            it.plus(orderPosition.netCost.times(BigDecimal.valueOf(orderPosition.amount)))\n        }\n    }\n}\n<\/code><\/pre>\n<h3 id=\"fluent-api-to-remove-several-variables\"><a href=\"#fluent-api-to-remove-several-variables\" id=\"fluent-api-to-remove-several-variables\" class=\"anchor\"><\/a>Fluent API to remove several variables<\/h3>\n<pre><code class=\"language-kotlin\">import io.holunda.camunda.bpm.data.remove\n\n@Configuration\nclass JavaDelegates {\n\n    @Bean\n    fun removeProcessVariables() = JavaDelegate { execution -&gt;\n        execution\n            .remove(ORDER_ID)\n            .remove(ORDER)\n            .remove(ORDER_APPROVED)\n            .remove(ORDER_TOTAL)\n            .removeLocal(ORDER_POSITIONS)\n    }\n}\n<\/code><\/pre>\n<h3 id=\"fluent-api-to-set-several-variables\"><a href=\"#fluent-api-to-set-several-variables\" id=\"fluent-api-to-set-several-variables\" class=\"anchor\"><\/a>Fluent API to set several variables<\/h3>\n<pre><code class=\"language-kotlin\">@Component\nclass SomeService(\n    private val runtimeService: RuntimeService,\n    private val taskService: TaskService\n) {\n\n    fun setNewValuesForExecution(executionId: String, rderId: String, orderApproved: Boolean) {\n        runtimeService.writer(executionId)\n            .set(ORDER_ID, orderId)\n            .set(ORDER_APPROVED, orderApproved)\n            .update(ORDER_TOTAL, { amount -&gt; amount.add(10) })\n    }\n\n    fun setNewValuesForTask(taskId: String, orderId: String, orderApproved: Boolean) {\n        taskService.writer(taskId)\n            .set(ORDER_ID, orderId)\n            .set(ORDER_APPROVED, orderApproved)\n    }\n\n  fun start() {\n      val variables = createProcessVariables()\n          .set(ORDER_ID, &quot;4711&quot;)\n          .set(ORDER_APPROVED, false)\n      runtimeService.startProcessInstanceById(&quot;myId&quot;, &quot;businessKey&quot;, variables)\n  }\n}\n<\/code><\/pre>\n<h3 id=\"fluent-api-to-read-several-variables\"><a href=\"#fluent-api-to-read-several-variables\" id=\"fluent-api-to-read-several-variables\" class=\"anchor\"><\/a>Fluent API to read several variables<\/h3>\n<pre><code class=\"language-kotlin\">@Component\nclass SomeService(\n  private val runtimeService: RuntimeService,\n  private val taskService: TaskService\n) {\n\n  fun readValuesFromExecution(executionId: String): String {\n      val reader = CamundaBpmData.reader(runtimeService, executionId)\n      val orderId = reader.get(ORDER_ID)\n      val orderApproved = reader.get(ORDER_APPROVED)\n      if (orderApproved) {\n          // ...\n      }\n      return orderId\n  }\n\n  fun readValuesFromTask(taskId: String ): String {\n      val reader = CamundaBpmData.reader(taskService, taskId)\n      val orderId = reader.get(ORDER_ID)\n      val orderApproved = reader.get(ORDER_APPROVED)\n      if (orderApproved) {\n          // ...\n      }\n      return orderId\n  }\n}\n<\/code><\/pre>\n<h3 id=\"anti-corruption-layer-wrap-variables-to-correlate\"><a href=\"#anti-corruption-layer-wrap-variables-to-correlate\" id=\"anti-corruption-layer-wrap-variables-to-correlate\" class=\"anchor\"><\/a>Anti-Corruption-Layer: Wrap variables to correlate<\/h3>\n<pre><code class=\"language-kotlin\">@Component\nclass SomeService {\n\n  val MESSAGE_ACL = CamundaBpmDataMapper.identityReplace(&quot;__transient&quot;, true);\n\n  fun correlate() {\n      val variables = CamundaBpmData.builder()\n          .set(ORDER_ID, &quot;4711&quot;)\n          .set(ORDER_APPROVED, false)\n          .build();\n      runtimeService.correlateMessage(&quot;message_1&quot;, MESSAGE_ACL.wrap(variables));\n  }\n}\n<\/code><\/pre>\n<h3 id=\"anti-corruption-layer-check-and-wrap-variables-to-correlate\"><a href=\"#anti-corruption-layer-check-and-wrap-variables-to-correlate\" id=\"anti-corruption-layer-check-and-wrap-variables-to-correlate\" class=\"anchor\"><\/a>Anti-Corruption-Layer: Check and wrap variables to correlate<\/h3>\n<pre><code class=\"language-kotlin\">@Component\nclass SomeService {\n\n    val MY_ACL = CamundaBpmDataACL.guardTransformingReplace(\n        &quot;__transient&quot;,\n        true,\n        VariablesGuard(exists(ORDER_ID)),\n        IdentityVariableMapTransformer\n    );\n\n  fun correlate() {\n      val variables = CamundaBpmData.builder()\n          .set(ORDER_ID, &quot;4711&quot;)\n          .set(ORDER_APPROVED, false)\n          .build();\n      runtimeService.correlateMessage(&quot;message_1&quot;, MESSAGE_ACL.checkAndWrap(variables));\n  }\n}\n<\/code><\/pre>\n<h3 id=\"define-guards-to-validate-variables-in-the-process\"><a href=\"#define-guards-to-validate-variables-in-the-process\" id=\"define-guards-to-validate-variables-in-the-process\" class=\"anchor\"><\/a>Define Guards to validate variables in the process<\/h3>\n<pre><code class=\"language-kotlin\">@Configuration\nclass VariableGuardConfiguration {\n\n    companion object {\n        const val LOAD_OPERATIONAL_FILE_GUARD = &quot;loadOperationalFileGuard&quot;;\n    }\n    \n    @Bean\n    // assuming dependencys to implement javax.validation:validation-api are present\n    fun validatorSupplier(): Supplier&lt;Validator&gt; = Supplier {\n      Validation.buildDefaultValidatorFactory().validator\n    }\n\n    @Bean(LOAD_OPERATIONAL_FILE_GUARD)\n    fun loadOperationalFileGuard(validatorSupplier : Supplier&lt;Validator&gt;): ExecutionListener =\n        DefaultGuardExecutionListener(\n            listOf(\n                REQUIRED_VALUE.exists(),\n                FUTURE_VALUE.notExists(),\n                THE_ANSWER.hasValue(42),\n                MY_DIRECTION.hasOneOfValues(setOf(&quot;left&quot;, &quot;up&quot;, &quot;down&quot;)),\n                USER_EMAIL.isEmail(),\n                DOCUMENT_ID.isUuid(),\n                DOCUMENT_BODY.matches { return@matches true },\n                DOCUMENT_BODY.matches(this::validationMessageSupplier) { return@matches true },\n                DOCUMENT_BODY.matchesRegexLocal(Regex(&quot;^Dude.*&quot;), &quot;Starts with 'Dude'&quot;),\n                MY_DOCUMENT.isValidBean(validatorSupplier)\n            ), true\n        )\n        \n    private fun validationMessageSupplier(variableFactory: VariableFactory&lt;String&gt;, localLabel: String, option: Optional&lt;String&gt;) =\n        &quot;Expecting$localLabel variable '${variableFactory.name}' to always match my document body matcher, but its value '${option.get()}' has not.&quot;\n}\n\nclass MyDocument(@field:Email val email: String)\n<\/code><\/pre>\n<h3 id=\"example-project\"><a href=\"#example-project\" id=\"example-project\" class=\"anchor\"><\/a>Example project<\/h3>\n<p>For more examples, please check-out the Kotlin Example project, at\n[Github](https://github.com/holunda-io/camunda-bpm-data/tree/develop/example/example-kotlin.<\/p>\n"
}