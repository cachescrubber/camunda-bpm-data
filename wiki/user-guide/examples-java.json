{
  "reference": {
    "path": "wiki/user-guide",
    "baseUrl": "https://www.holunda.io/camunda-bpm-data",
    "fileName": "examples-java",
    "extension": "html",
    "usePrettyUrl": true,
    "link": "https://www.holunda.io/camunda-bpm-data/wiki/user-guide/examples-java"
  },
  "next": {
    "path": "wiki/user-guide",
    "baseUrl": "https://www.holunda.io/camunda-bpm-data",
    "fileName": "examples-kotlin",
    "extension": "html",
    "usePrettyUrl": true,
    "link": "https://www.holunda.io/camunda-bpm-data/wiki/user-guide/examples-kotlin"
  },
  "previous": {
    "path": "wiki/user-guide",
    "baseUrl": "https://www.holunda.io/camunda-bpm-data",
    "fileName": "features",
    "extension": "html",
    "usePrettyUrl": true,
    "link": "https://www.holunda.io/camunda-bpm-data/wiki/user-guide/features"
  },
  "data": {"title": "Java Examples"},
  "description": "",
  "title": "Java Examples",
  "content": "<h2 id=\"java-examples\"><a href=\"#java-examples\" id=\"java-examples\" class=\"anchor\"><\/a>Java Examples<\/h2>\n<p>The following example code demonstrates the usage of the library using Java.<\/p>\n<h3 id=\"define-variable\"><a href=\"#define-variable\" id=\"define-variable\" class=\"anchor\"><\/a>Define variable<\/h3>\n<pre><code class=\"language-java\">public class OrderApproval {\n  public static final VariableFactory&lt;String&gt; ORDER_ID = stringVariable(&quot;orderId&quot;);\n  public static final VariableFactory&lt;Order&gt; ORDER = customVariable(&quot;order&quot;, Order.class);\n  public static final VariableFactory&lt;Boolean&gt; ORDER_APPROVED = booleanVariable(&quot;orderApproved&quot;);\n  public static final VariableFactory&lt;OrderPosition&gt; ORDER_POSITION = customVariable(&quot;orderPosition&quot;, OrderPosition.class);\n  public static final VariableFactory&lt;BigDecimal&gt; ORDER_TOTAL = customVariable(&quot;orderTotal&quot;, BigDecimal.class);\n}\n<\/code><\/pre>\n<h3 id=\"read-variable-from-java-delegate\"><a href=\"#read-variable-from-java-delegate\" id=\"read-variable-from-java-delegate\" class=\"anchor\"><\/a>Read variable from Java delegate<\/h3>\n<pre><code class=\"language-java\">@Configuration\nclass JavaDelegates {\n\n  @Bean\n  public JavaDelegate calculateOrderPositions() {\n    return execution -&gt; {\n      OrderPosition orderPosition = ORDER_POSITION.from(execution).get();\n      Boolean orderApproved = ORDER_APPROVED.from(execution).getLocal();\n      Optional&lt;BigDecimal&gt; orderTotal = ORDER_TOTAL.from(execution).getOptional();\n    };\n  }\n}\n<\/code><\/pre>\n<h3 id=\"write-variable-from-java-delegate\"><a href=\"#write-variable-from-java-delegate\" id=\"write-variable-from-java-delegate\" class=\"anchor\"><\/a>Write variable from Java delegate<\/h3>\n<pre><code class=\"language-java\">import java.math.BigDecimal;\n\n@Configuration\nclass JavaDelegates {\n\n  @Bean\n  public JavaDelegate calculateOrderPositions() {\n    return execution -&gt; {\n      OrderPosition orderPosition = new OrderPosition(&quot;Pencil&quot;, BigDecimal.valueOf(1.5), 1);\n      ORDER_POSITION.on(execution).set(orderPosition);\n    };\n  }\n}\n<\/code><\/pre>\n<h3 id=\"remove-variable-from-java-delegate\"><a href=\"#remove-variable-from-java-delegate\" id=\"remove-variable-from-java-delegate\" class=\"anchor\"><\/a>Remove variable from Java delegate<\/h3>\n<pre><code class=\"language-java\">import java.math.BigDecimal;\n@Configuration\nclass JavaDelegates {\n\n  @Bean\n  public JavaDelegate calculateOrderPositions() {\n    return execution -&gt; {\n      ORDER_APPROVED.on(execution).removeLocal();\n    };\n  }\n}\n<\/code><\/pre>\n<h3 id=\"update-variable-from-java-delegate\"><a href=\"#update-variable-from-java-delegate\" id=\"update-variable-from-java-delegate\" class=\"anchor\"><\/a>Update variable from Java delegate<\/h3>\n<pre><code class=\"language-java\">import java.math.BigDecimal;\n@Configuration\nclass JavaDelegates {\n\n  @Bean\n  public JavaDelegate calculateOrderPositions() {\n    return execution -&gt; {\n      OrderPosition orderPosition = ORDER_POSITION.from(execution).get();\n      ORDER_TOTAL.on(execution).updateLocal(amount -&gt; amount.add(orderPosition.getNetCost().multiply(BigDecimal.valueOf(orderPosition.getAmount()))));\n    };\n  }\n}\n<\/code><\/pre>\n<h3 id=\"fluent-api-to-remove-several-variables\"><a href=\"#fluent-api-to-remove-several-variables\" id=\"fluent-api-to-remove-several-variables\" class=\"anchor\"><\/a>Fluent API to remove several variables<\/h3>\n<pre><code class=\"language-java\">@Configuration\nclass JavaDelegates {\n\n  @Bean\n  public ExecutionListener removeProcessVariables() {\n    return execution -&gt;\n    {\n      CamundaBpmData.writer(execution)\n          .remove(ORDER_ID)\n          .remove(ORDER)\n          .remove(ORDER_APPROVED)\n          .remove(ORDER_TOTAL)\n          .removeLocal(ORDER_POSITIONS);\n    };\n  }\n}\n<\/code><\/pre>\n<h3 id=\"fluent-api-to-set-several-variables\"><a href=\"#fluent-api-to-set-several-variables\" id=\"fluent-api-to-set-several-variables\" class=\"anchor\"><\/a>Fluent API to set several variables<\/h3>\n<pre><code class=\"language-java\">@Component\nclass SomeService {\n\n  @Autowired\n  private RuntimeService runtimeService;\n  @Autowired\n  private TaskService taskService;\n\n  public void setNewValuesForExecution(String executionId, String orderId, Boolean orderApproved) {\n      CamundaBpmData.writer(runtimeService, executionId)\n          .set(ORDER_ID, orderId)\n          .set(ORDER_APPROVED, orderApproved)\n          .update(ORDER_TOTAL, amount -&gt; amount.add(10));\n  }\n\n  public void setNewValuesForTask(String taskId, String orderId, Boolean orderApproved) {\n      CamundaBpmData.writer(taskService, taskId)\n          .set(ORDER_ID, orderId)\n          .set(ORDER_APPROVED, orderApproved);\n  }\n\n  public void start() {\n      VariableMap variables = CamundaBpmData.writer()\n          .set(ORDER_ID, &quot;4711&quot;)\n          .set(ORDER_APPROVED, false)\n          .build();\n      runtimeService.startProcessInstanceById(&quot;myId&quot;, &quot;businessKey&quot;, variables);\n  }\n}\n<\/code><\/pre>\n<h3 id=\"fluent-api-to-read-several-variables\"><a href=\"#fluent-api-to-read-several-variables\" id=\"fluent-api-to-read-several-variables\" class=\"anchor\"><\/a>Fluent API to read several variables<\/h3>\n<pre><code class=\"language-java\">@Component\nclass SomeService {\n\n  @Autowired\n  private RuntimeService runtimeService;\n  @Autowired\n  private TaskService taskService;\n\n  public String readValuesFromExecution(String executionId) {\n      VariableReader reader = CamundaBpmData.reader(runtimeService, executionId);\n      String orderId = reader.get(ORDER_ID);\n      Boolean orderApproved = reader.get(ORDER_APPROVED);\n      if (orderApproved) {\n          // ...\n      }\n      return orderId;\n  }\n\n  public String readValuesFromTask(String taskId) {\n      VariableReader reader = CamundaBpmData.reader(taskService, taskId);\n      String orderId = reader.get(ORDER_ID);\n      Boolean orderApproved = reader.get(ORDER_APPROVED);\n      if (orderApproved) {\n          // ...\n      }\n      return orderId;\n  }\n}\n<\/code><\/pre>\n<h3 id=\"anti-corruption-layer-wrap-variables-to-correlate\"><a href=\"#anti-corruption-layer-wrap-variables-to-correlate\" id=\"anti-corruption-layer-wrap-variables-to-correlate\" class=\"anchor\"><\/a>Anti-Corruption-Layer: Wrap variables to correlate<\/h3>\n<pre><code class=\"language-java\">@Component\nclass SomeService {\n\n  private static final AntiCorruptionLayer MESSAGE_ACL = CamundaBpmDataMapper.identityReplace(\n      &quot;__transient&quot;,\n      true\n  );\n\n  public void correlate() {\n      VariableMap variables = CamundaBpmData.builder()\n          .set(ORDER_ID, &quot;4711&quot;)\n          .set(ORDER_APPROVED, false)\n          .build();\n      runtimeService.correlateMessage(&quot;message_1&quot;, MESSAGE_ACL.wrap(variables));\n  }\n}\n<\/code><\/pre>\n<h3 id=\"anti-corruption-layer-check-and-wrap-variables-to-correlate\"><a href=\"#anti-corruption-layer-check-and-wrap-variables-to-correlate\" id=\"anti-corruption-layer-check-and-wrap-variables-to-correlate\" class=\"anchor\"><\/a>Anti-Corruption-Layer: Check and wrap variables to correlate<\/h3>\n<pre><code class=\"language-java\">@Component\nclass SomeService {\n\n    private static AntiCorruptionLayer MY_ACL = CamundaBpmDataACL.guardTransformingReplace(\n        &quot;__transient&quot;,\n        true,\n        new VariablesGuard(exists(ORDER_ID)),\n        IdentityVariableMapTransformer.INSTANCE\n    );\n\n  public void correlate() {\n      VariableMap variables = CamundaBpmData.builder()\n          .set(ORDER_ID, &quot;4711&quot;)\n          .set(ORDER_APPROVED, false)\n          .build();\n      runtimeService.correlateMessage(&quot;message_1&quot;, MESSAGE_ACL.checkAndWrap(variables));\n  }\n}\n<\/code><\/pre>\n<h3 id=\"define-guards-to-validate-variables-in-the-process\"><a href=\"#define-guards-to-validate-variables-in-the-process\" id=\"define-guards-to-validate-variables-in-the-process\" class=\"anchor\"><\/a>Define Guards to validate variables in the process<\/h3>\n<pre><code class=\"language-java\">@Configuration\nclass VariableGuardConfiguration {\n\n    public static final String MY_GUARD_BEANNAME = &quot;myGuardBeanName&quot;;\n        \n    @Bean\n    public Supplier&lt;Validator&gt;  validatorSupplier() {\n        // assuming dependencys to implement javax.validation:validation-api are present\n        return () -&gt; Validation.buildDefaultValidatorFactory().getValidator();\n    }\n\n    @Bean(VariableGuardConfiguration.MY_GUARD_BEANNAME)\n    public ExecutionListener myGuardBeanName(Supplier&lt;Validator&gt; validatorSupplier) {\n        return new DefaultGuardExecutionListener(\n            Arrays.asList(\n                exists(REQUIRED_VALUE),\n                notExists(FUTURE_VALUE),\n                hasValue(THE_ANSWER, 42),\n                hasOneOfValues(MY_DIRECTION, Set.of(&quot;left&quot;, &quot;up&quot;, &quot;down&quot;)),\n                isEmail(USER_EMAIL),\n                isUuid(DOCUMENT_ID),\n                matches(DOCUMENT_BODY, this::myDocumentBodyMatcher),\n                matches(DOCUMENT_BODY, this::myDocumentBodyMatcher, this::validationMessageSupplier),\n                matchesRegex(DOCUMENT_BODY, &quot;^Dude.*&quot;, &quot;Starts with 'Dude'&quot;),\n                isValidBean(My_DOCUMENT, validatorSupplier)\n            ), true);\n    }\n\n    private Boolean myDocumentBodyMatcher(String body) {\n        return true;\n    }    \n\n    private String validationMessageSupplier(VariableFactory&lt;String&gt; variableFactory, String localLabel, Optional&lt;String&gt; option) {\n        return String.format(&quot;Expecting%s variable '%s' to always match my document body matcher, but its value '%s' has not.&quot;, localLabel, variableFactory.getName(), option.orElse(&quot;&quot;));\n    }\n}\n\nclass MyDocument {\n    @Email\n    public String email;    \n}\n<\/code><\/pre>\n<h3 id=\"example-project\"><a href=\"#example-project\" id=\"example-project\" class=\"anchor\"><\/a>Example project<\/h3>\n<p>For more examples, please check-out the Java Example project, at\n<a href=\"https://github.com/holunda-io/camunda-bpm-data/tree/develop/example/example-java\">Github<\/a><\/p>\n"
}