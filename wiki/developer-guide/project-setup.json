{
  "reference": {
    "path": "wiki/developer-guide",
    "baseUrl": "https://www.holunda.io/camunda-bpm-data",
    "fileName": "project-setup",
    "extension": "html",
    "usePrettyUrl": true,
    "link": "https://www.holunda.io/camunda-bpm-data/wiki/developer-guide/project-setup"
  },
  "previous": {
    "path": "wiki/developer-guide",
    "baseUrl": "https://www.holunda.io/camunda-bpm-data",
    "fileName": "contribution",
    "extension": "html",
    "usePrettyUrl": true,
    "link": "https://www.holunda.io/camunda-bpm-data/wiki/developer-guide/contribution"
  },
  "data": {
    "title": "Project Setup",
    "pageId": "project-setup"
  },
  "description": "",
  "title": "Project Setup",
  "content": "<h2 id=\"project-setup\"><a href=\"#project-setup\" id=\"project-setup\" class=\"anchor\"><\/a>Project Setup<\/h2>\n<p>If you are interested in developing and building the project please follow the following instruction.<\/p>\n<h3 id=\"version-control\"><a href=\"#version-control\" id=\"version-control\" class=\"anchor\"><\/a>Version control<\/h3>\n<p>To checkout sources of the project, please execute from your command line:<\/p>\n<pre><code class=\"language-bash\">git clone https://github.com/holunda-io/camunda-bpm-data.git\ncd camunda-bpm-data\n<\/code><\/pre>\n<p>We are using gitflow in our git SCM. That means that you should start from <code>develop<\/code> branch, create a <code>feature/&lt;name&gt;<\/code> out of it and once it\nis completed create a pull request containing it. Please squash your commits before submitting and use semantic commit messages, if\npossible.<\/p>\n<h3 id=\"project-build\"><a href=\"#project-build\" id=\"project-build\" class=\"anchor\"><\/a>Project Build<\/h3>\n<p>Perform the following steps to get a development setup up and running.<\/p>\n<pre><code class=\"language-bash\">./mvnw clean install\n<\/code><\/pre>\n<h3 id=\"integration-tests\"><a href=\"#integration-tests\" id=\"integration-tests\" class=\"anchor\"><\/a>Integration Tests<\/h3>\n<p>The default build command above will NOT run <code>failsafe<\/code> Maven plugin executing the integration tests\n(These are JUnit tests with class names ending with ITest). In order to run integration tests, please call from your command line:<\/p>\n<pre><code class=\"language-bash\">./mvnw -Pitest\n<\/code><\/pre>\n<h3 id=\"project-build-modes-and-profiles\"><a href=\"#project-build-modes-and-profiles\" id=\"project-build-modes-and-profiles\" class=\"anchor\"><\/a>Project build modes and profiles<\/h3>\n<h4 id=\"camunda-version\"><a href=\"#camunda-version\" id=\"camunda-version\" class=\"anchor\"><\/a>Camunda Version<\/h4>\n<p>You can choose the used Camunda version by specifying the profile <code>camunda-ee<\/code> or <code>camunda-ce<\/code>. The default version is a Community Edition.\nSpecify <code>-Pcamunda-ee<\/code> to switch to Camunda Enterprise edition. This will require a valid Camunda license. You can put it into a\nfile <code>~/.camunda/license.txt<\/code> and it will be detected automatically.<\/p>\n<h4 id=\"examples\"><a href=\"#examples\" id=\"examples\" class=\"anchor\"><\/a>Examples<\/h4>\n<p>If you want to skip the build of examples, please specify the <code>-DskipExamples<\/code> switch in your command line.<\/p>\n<h4 id=\"documentation\"><a href=\"#documentation\" id=\"documentation\" class=\"anchor\"><\/a>Documentation<\/h4>\n<p>We are using <a href=\"https://github.com/orchidhq/Orchid\">JavaEden Orchid<\/a> for generation of a static site documentation and rely on Markdown as\nmuch as possible.<\/p>\n<p>TIP: If you want to develop your docs in 'live' mode, run <code>./mvnw -f docs -Pserve-docs<\/code> and access the http://localhost:8080/ from your\nbrowser.<\/p>\n<p>For creation of documentation, please run:<\/p>\n<pre><code class=\"language-bash\">./mvnw -f docs\n<\/code><\/pre>\n<p>WARNING: This operation requires special permissions. You need to replace <code>GITHUB_TOKEN<\/code> by the token of the github pages repository,\nallowing to publish the pages.<\/p>\n<p>In order to publish documentation to github pages, please run from command line<\/p>\n<pre><code class=\"language-bash\">./mvnw -f docs -Pdeploy-docs -DgithubToken=GITHUB_TOKEN\n<\/code><\/pre>\n<h4 id=\"starting-example-application\"><a href=\"#starting-example-application\" id=\"starting-example-application\" class=\"anchor\"><\/a>Starting example application<\/h4>\n<p>To start applications, either use your IDE and create run configuration for the classes:<\/p>\n<ul>\n<li><code>io.holunda.camunda.bpm.data.example.CamundaBpmDataProcessApplication<\/code><\/li>\n<li><code>io.holunda.camunda.bpm.data.example.kotlin.CamundaBpmDataKotlinExampleApplication<\/code><\/li>\n<\/ul>\n<p>Alternatively, you can run them from the command line:<\/p>\n<pre><code class=\"language-bash\">./mvn spring-boot:run -f example/example-java\n./mvn spring-boot:run -f example/example-kotlin\n<\/code><\/pre>\n<h3 id=\"continuous-integration\"><a href=\"#continuous-integration\" id=\"continuous-integration\" class=\"anchor\"><\/a>Continuous Integration<\/h3>\n<p>Github Actions is building all branches on commit hook. In addition, a special action is building releases from master branch.<\/p>\n<h3 id=\"release-management\"><a href=\"#release-management\" id=\"release-management\" class=\"anchor\"><\/a>Release Management<\/h3>\n<p>Release management has been set-up for use of Sonatype Nexus (= Maven Central).<\/p>\n<h4 id=\"what-modules-get-deployed-to-repository\"><a href=\"#what-modules-get-deployed-to-repository\" id=\"what-modules-get-deployed-to-repository\" class=\"anchor\"><\/a>What modules get deployed to repository<\/h4>\n<p>Currently, the following modules are released to OSS Maven Central:<\/p>\n<ul>\n<li>camunda-bpm-data-parent<\/li>\n<li>camunda-bpm-data<\/li>\n<li>camunda-bpm-data-test<\/li>\n<\/ul>\n<h4 id=\"trigger-new-release\"><a href=\"#trigger-new-release\" id=\"trigger-new-release\" class=\"anchor\"><\/a>Trigger new release<\/h4>\n<p>WARNING: This operation requires special permissions.<\/p>\n<p>We use gitflow for development (see <a href=\"http://nvie.com/posts/a-successful-git-branching-model/\">A successful git branching model<\/a>\nfor more details). You could use gitflow with native git commands, but then you would have to change the versions in the poms manually.\nTherefore we use the\n<a href=\"https://github.com/aleksandr-m/gitflow-maven-plugin/\">mvn gitflow plugin<\/a>, which handles this and other things nicely.<\/p>\n<p>You can build a release with:<\/p>\n<pre><code class=\"language-bash\">./mvnw gitflow:release-start\n./mvnw gitflow:release-finish\n<\/code><\/pre>\n<p>This will update the versions in the <code>pom.xml<\/code> s accordingly and push the release tag to the <code>master<\/code> branch and update the <code>develop<\/code> branch\nfor the new development version.<\/p>\n<h4 id=\"create-feature-for-development\"><a href=\"#create-feature-for-development\" id=\"create-feature-for-development\" class=\"anchor\"><\/a>Create feature for development<\/h4>\n<p>You can create a feature branch for development using:<\/p>\n<pre><code class=\"language-bash\">./mvnw gitflow:feature-start\n<\/code><\/pre>\n<p>WARNING: This operation requires special permissions.<\/p>\n<p>After the feature is complete, create a PR. To merge the PR into develop use the command:<\/p>\n<pre><code class=\"language-bash\">./mvnw gitflow:feature-finish\n<\/code><\/pre>\n<h4 id=\"trigger-a-deploy\"><a href=\"#trigger-a-deploy\" id=\"trigger-a-deploy\" class=\"anchor\"><\/a>Trigger a deploy<\/h4>\n<p>WARNING: This operation requires special permissions.<\/p>\n<p>Currently, CI allows for deployment of artifacts to Maven Central and is executed via Github Actions. This means, that a push to <code>master<\/code>\nbranch will start the corresponding build job, and if successful the artifacts will get into <code>Staging Repositories<\/code> of OSS Sonatype without\nmanual intervention. The repository gets automatically closed and released on successful upload.<\/p>\n<p>If you still want to execute the deployment from your local machine, you need to execute the following command on the <code>master<\/code> branch:<\/p>\n<pre><code class=\"language-bash\">./mvnw clean deploy -B -DskipTests -DskipExamples -Prelease\n<\/code><\/pre>\n"
}