{
  "reference": {
    "path": "",
    "baseUrl": "https://www.holunda.io/camunda-bpm-data",
    "fileName": "quick-start",
    "extension": "html",
    "usePrettyUrl": true,
    "link": "https://www.holunda.io/camunda-bpm-data/quick-start"
  },
  "data": {
    "title": "Quick Start",
    "pageId": "quick-start"
  },
  "description": "",
  "title": "Quick Start",
  "content": "<h2 id=\"quick-start\"><a href=\"#quick-start\" id=\"quick-start\" class=\"anchor\"><\/a>Quick Start<\/h2>\n<h3 id=\"add-dependency\"><a href=\"#add-dependency\" id=\"add-dependency\" class=\"anchor\"><\/a>Add dependency<\/h3>\n<p>Current version available in Sonatype OSS Maven Central is:<\/p>\n<p>In Apache Maven add to your <code>pom.xml<\/code>:<\/p>\n<pre><code class=\"language-xml\">&lt;dependency&gt;\n  &lt;groupId&gt;io.holunda.data&lt;/groupId&gt;\n  &lt;artifactId&gt;camunda-bpm-data&lt;/artifactId&gt;\n  &lt;version&gt;${camunda-bpm-data.version}&lt;/version&gt;\n&lt;/dependency&gt;\n<\/code><\/pre>\n<p>For Gradle Kotlin DSL add to your <code>build.gradle.kts<\/code>:<\/p>\n<pre><code class=\"language-kotlin\">implementation(&quot;io.holunda.data:camunda-bpm-data:${camunda-bpm-data.version}&quot;)\n<\/code><\/pre>\n<p>For Gradle Groovy DSL add to your <code>build.gradle<\/code>:<\/p>\n<pre><code class=\"language-groovy\">implementation 'io.holunda.data:camunda-bpm-data:${camunda-bpm-data.version}'\n<\/code><\/pre>\n<h3 id=\"declare-process-variable-factories\"><a href=\"#declare-process-variable-factories\" id=\"declare-process-variable-factories\" class=\"anchor\"><\/a>Declare process variable factories<\/h3>\n<p>First you have to define your process variables, by providing the variable name and type. For providing the type,\ndifferent convenience methods exist:<\/p>\n<p>Here is a example in Java:<\/p>\n<pre><code class=\"language-java\">\nimport io.holunda.camunda.bpm.data.factory.VariableFactory;\nimport static io.holunda.camunda.bpm.data.CamundaBpmData.*;\n\npublic class OrderApproval {\n  public static final VariableFactory&lt;String&gt; ORDER_ID = stringVariable(&quot;orderId&quot;);\n  public static final VariableFactory&lt;Order&gt; ORDER = customVariable(&quot;order&quot;, Order.class);\n  public static final VariableFactory&lt;Boolean&gt; ORDER_APPROVED = booleanVariable(&quot;orderApproved&quot;);\n  public static final VariableFactory&lt;OrderPosition&gt; ORDER_POSITION = customVariable(&quot;orderPosition&quot;, OrderPosition.class);\n  public static final VariableFactory&lt;BigDecimal&gt; ORDER_TOTAL = customVariable(&quot;orderTotal&quot;, BigDecimal.class);\n}\n<\/code><\/pre>\n<h3 id=\"access-process-variables-from-java-delegate\"><a href=\"#access-process-variables-from-java-delegate\" id=\"access-process-variables-from-java-delegate\" class=\"anchor\"><\/a>Access process variables from Java Delegate<\/h3>\n<p>If you want to access the process variable, call methods on the <code>ProcessVariableFactory<\/code> to configure the usage context,\nand then invoke the variable access methods.<\/p>\n<p>Here is an example, how it looks like to access variable from <code>JavaDelegate<\/code> implemented in Java. In this example,\nthe total amount is calculated from the amounts of order positions and stored in the process variable.<\/p>\n<pre><code class=\"language-java\">\n@Configuration\nclass JavaDelegates {\n\n  @Bean\n  public JavaDelegate calculateOrderPositions() {\n    return execution -&gt; {\n      OrderPosition orderPosition = ORDER_POSITION.from(execution).get();\n      BigDecimal oldTotal = ORDER_TOTAL.from(execution).getOptional().orElse(BigDecimal.ZERO);\n      BigDecimal newTotal = oldTotal.add(orderPosition.getNetCost().multiply(BigDecimal.valueOf(orderPosition.getAmount())));\n      ORDER_TOTAL.on(execution).setLocal(newTotal);\n    };\n  }\n}\n<\/code><\/pre>\n<h3 id=\"variable-access-from-rest-controller\"><a href=\"#variable-access-from-rest-controller\" id=\"variable-access-from-rest-controller\" class=\"anchor\"><\/a>Variable access from REST Controller<\/h3>\n<p>Now imagine you are implementing a REST controller for a user task form which\nloads data from the process application, displays it, captures some input and\nsends that back to the process application to complete the user task. By doing so,\nyou will usually need to access process variables. Here is an example:<\/p>\n<pre><code class=\"language-java\">@RestController\n@RequestMapping(&quot;/task/approve-order&quot;)\npublic class ApproveOrderTaskController {\n\n    private final TaskService taskService;\n\n    public ApproveOrderTaskController(TaskService taskService) {\n        this.taskService = taskService;\n    }\n\n    @GetMapping(&quot;/{taskId}&quot;)\n    public ResponseEntity&lt;ApproveTaskDto&gt; loadTask(@PathVariable(&quot;taskId&quot;) String taskId) {\n        Order order = ORDER.from(taskService, taskId).get();\n        return ResponseEntity.ok(new ApproveTaskDto(order));\n    }\n\n    @PostMapping(&quot;/{taskId}&quot;)\n    public ResponseEntity&lt;Void&gt; completeTask(@PathVariable(&quot;taskId&quot;) String taskId, @RequestBody ApproveTaskCompleteDto userInput) {\n        VariableMap vars = builder()\n            .set(ORDER_APPROVED, userInput.getApproved())\n            .build();\n        taskService.complete(taskId, vars);\n        return ResponseEntity.noContent().build();\n    }\n}\n\n<\/code><\/pre>\n<h3 id=\"testing-correct-variable-access\"><a href=\"#testing-correct-variable-access\" id=\"testing-correct-variable-access\" class=\"anchor\"><\/a>Testing correct variable access<\/h3>\n<p>If you want to write the test for the REST controller, you will need to stub\nthe task service and verify that the correct variables has been set. To simplify\nthese tests, we created an additional library module <code>camunda-bpm-data-test<\/code>.\nPlease put the following dependency into your <code>pom.xml<\/code>:<\/p>\n<pre><code class=\"language-xml\">&lt;dependency&gt;\n  &lt;groupId&gt;io.holunda.data&lt;/groupId&gt;\n  &lt;artifactId&gt;camunda-bpm-data-test&lt;/artifactId&gt;\n  &lt;version&gt;1.0.2&lt;/version&gt;\n  &lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;\n<\/code><\/pre>\n<p>Now you can use <code>TaskServiceVariableMockBuilder<\/code> to stub correct behavior of Camunda Task Service\nand <code>TaskServiceVerifier<\/code> to verify the correct access to variables easily. Here is the JUnit\ntest of the REST controller above, making use of <code>camunda-bpm-data-test<\/code>.<\/p>\n<pre><code class=\"language-java\">public class ApproveOrderTaskControllerTest {\n\n    private static Order order = new Order(&quot;ORDER-ID-1&quot;, new Date(), new ArrayList&lt;&gt;());\n    private TaskService taskService = mock(TaskService.class);\n    private TaskServiceMockVerifier verifier = taskServiceMockVerifier(taskService);\n    private ApproveOrderTaskController controller = new ApproveOrderTaskController(taskService);\n    private String taskId;\n\n    @Before\n    public void prepareTest() {\n        reset(taskService);\n        taskId = UUID.randomUUID().toString();\n    }\n\n    @Test\n    public void testLoadTask() {\n        // given\n        taskServiceVariableMockBuilder(taskService).initial(ORDER, order).build();\n        // when\n        ResponseEntity&lt;ApproveTaskDto&gt; responseEntity = controller.loadTask(taskId);\n        // then\n        assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.OK);\n        assertThat(responseEntity.getBody()).isEqualTo(new ApproveTaskDto(order));\n        verifier.verifyGet(ORDER, taskId);\n        verifier.verifyNoMoreInteractions();\n    }\n\n    @Test\n    public void testCompleteTask() {\n        // when\n        ApproveTaskCompleteDto response = new ApproveTaskCompleteDto(true);\n        ResponseEntity&lt;Void&gt; responseEntity = controller.completeTask(taskId, response);\n        // then\n        assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.NO_CONTENT);\n        verifier.verifyComplete(builder().set(ORDER_APPROVED, response.getApproved()).build(), taskId);\n        verifier.verifyNoMoreInteractions();\n    }\n}\n<\/code><\/pre>\n"
}